/*
int x1 , x2 ;
float x3 ;
x1 = x2 + x3 ;
switch ( x1 )
{
case 1 :
x2 = x1 ;
break;
}
 */
package compiarit;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Erik Ortiz
 */
public class CompiAritmetica extends javax.swing.JFrame {

    public CompiAritmetica() {
        initComponents();
    }
    static String lexemas = "", texto = "", triplo = "#\tOperador\tDato Objeto\tDato Fuente\n", t1 = "", triploSwitch = "";
    static int numIDE = 1, contadorTriplos = 1;
    static String[] notToken;
    static List<Variables> TablaVariables = new ArrayList<>();
    static List<Errores> TablaErrores = new ArrayList<>();
    static List<String> ListaPrefijo = new ArrayList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInst = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableVariables = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableErrores = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnReglas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btnLimpiar.setText("Resetear");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        txtInst.setColumns(20);
        txtInst.setRows(5);
        jScrollPane1.setViewportView(txtInst);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Codigo:");

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        tableVariables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LEXEMA","TOKEN","DATO"
            }
        ));
        jScrollPane3.setViewportView(tableVariables);

        tableErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOKEN", "LEXEMA", "LINEA"
            }
        ));
        jScrollPane4.setViewportView(tableErrores);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("TABLA DE SIMBOLOS");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("TABLA DE ERRORES");

        btnReglas.setText("Reglas");
        btnReglas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReglasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(btnAceptar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReglas, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAceptar)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiar)
                    .addComponent(btnReglas))
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed

        limpiarTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed

        String instruccion = txtInst.getText();         //pedir la instruccion
        String[] linea = instruccion.split("\\n");//separar linea por linea
        int i, n = 1;          //CONTADOR DE LINEAS

        for (String line : linea) {  //separar linea por linea
            String[] lexema = line.split("\\s");   //dividir por tokens la instruccion
            for (String lex : lexema) {   //para checar cada token
                checarLexema(lex, line, n);
            }
            n++;
        }

        for (i = 0; i < linea.length; i++) {

            if (switchAparece(linea[i])) {
                incopatibilidadTiposSwitch(linea[i], i + 1);
                i = calcularCases(i);
            }
            if (igualAparece(linea[i])) {
                incopatibilidadTipos(linea[i], i + 1);
                calcularTriplos(linea[i]);
            }
        }
        imprimirVariables();
        imprimirErrores();
        imprimirTxt();
        imprimirTxtTriplos();
        JOptionPane.showMessageDialog(null, "Archivo de Triplos y Token generados!");
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnReglasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReglasActionPerformed
        // TODO add your handling code here:
        
        JOptionPane.showMessageDialog(null, "1.-Separar por espacio TODO variables,signos,palabras reservadadas, etc. \n"
                + "2.- Terminar linea con ';'\n"
                + "3.- El compilador solo soporta los siguientes operaciones, Suma, Resta, Multiplicacion y Divicion\n"
                + "4.- Ejemplo de Codigo: \n"
                + "int x1 , x2 ;\n"
                + "float x3 ;\n"
                + "x1 = x2 + x3 ;\n"
                + "switch ( x1 )\n"
                + "{\n"
                + "case 1 :\n"
                + "x2 = x1 ;\n"
                + "break;\n"
                + "}", "Reglas!!!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnReglasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompiAritmetica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompiAritmetica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompiAritmetica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompiAritmetica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompiAritmetica().setVisible(true);
            }
        });
    }

    ///////////////////// METODOS ////////////////////////
    public int calcularCases(int n) {
        String instruccion = txtInst.getText();         //pedir la instruccion
        String[] linea = instruccion.split("\\n");//separar linea por linea
        int i;

        for (i = n; i <= linea.length; i++) {

            if (linea[i].contains("case")) {
                String[] t2 = linea[i].split("case");
                t2[1] = t2[1].replace(":", "");
                t2[1] = t2[1].replace(" ", "");
                calcularTriplosSwitch(t2[1]);
            }
            if (igualAparece(linea[i])) {
                calcularTriplos(linea[i]);
                //TALVEZ PONER EL JMP DEL BREAK AQUI CON EL STRING IMPRESOR
                triplo = triplo + contadorTriplos + "\t\tJMP\t\tSALIDA\n";
                contadorTriplos++;
            }
            //agregar si aparece {
            if (linea[i].equals("}")) {
                break;
            }

        }
        return i;
    }

    public void incopatibilidadTipos(String line, int linea) {

        Variables var;

        String primerDato = "";
        String segundoDato;
        String[] lexema = line.split("\\s");   //dividir por tokens la instruccion
        int x = 0;
        for (String lex : lexema) {   //para checar cada token
            for (int i = 0; i < TablaVariables.size(); i++) {
                var = TablaVariables.get(i);
                if (var.getToken().startsWith("IDE")) {
                    if (lex.equals(var.getLexema())) {
                        if (x == 0) {
                            primerDato = var.getDato();
                            x = 1;
                        }
                        segundoDato = var.getDato();
                        if (!primerDato.equals(segundoDato)) {
                            if (!checarExistenciaErrores(lex)) {
                                TablaErrores.add(new Errores(var.getToken(), "INCOMPATIBILIDAD DE TIPOS", linea));
                                numIDE++;
                            }
                        }
                    }
                }
            }
        }

    }

    public void incopatibilidadTiposSwitch(String line, int linea) {
        Variables var;
        String[] lexema = line.split("\\(");   //dividir por tokens la instruccion
        String variable = lexema[1].replace(")", "");
        variable = variable.replace(" ", "");
        t1 = variable;
        for (int i = 0; i < TablaVariables.size(); i++) {
            var = TablaVariables.get(i);
            if (var.getLexema().equals(variable)) {
                if (checarExistenciaErrores(var.getToken())) {
                    TablaErrores.add(new Errores(var.getToken(), "INCOMPATIBILIDAD DE TIPOS", linea));
                    numIDE++;
                }
            }
        }
    }

    public boolean igualAparece(String linea) {
        Pattern patINT = Pattern.compile("=");
        Matcher matINT = patINT.matcher(linea);

        return matINT.find();
    }

    public boolean switchAparece(String linea) {
        Pattern patINT = Pattern.compile("switch");
        Matcher matINT = patINT.matcher(linea);

        return matINT.find();
    }

    public String prefijo2(String line) {
        String salida = "";
        String operando1 = "";
        String operando2 = "";
        String operador = "";
        String primero = "";
        int x = 0;
        String[] lexema = line.split("\\s");   //dividir por tokens la instruccion
        for (String lex : lexema) {   //para checar cada token
            if (isOperator(lex)) {
                operador = lex;
                //solo me sirve para poner el = a lo ultimo
                if (lex.equals("=")) {
                    primero = operando1;
                    operando1 = "";
                    x = -1;
                    operador = "";
                    operando2 = "";
                }
            } else {
                if (operando1.equals("")) {
                    operando1 = lex;
                }
                operando2 = lex;

            }
            x++;
            if (x == 3) {
                operando1 = operador + " " + operando1 + " " + operando2;
                x = 1;
            }

        }//End of for
        salida = "=" + " " + primero + " " + operando1;
        return salida;
    }

    public void calcularTriplos(String prefijo) {

        String salida = "";
        String operando1 = "";
        String operando2 = "";
        String operador = "";
        String primero = "";
        int x = 0;

        String[] lexema = prefijo.split("\\s");   //dividir por tokens el prefijo

        for (String lex : lexema) {   //para checar cada token
            if (isOperator(lex)) {
                operador = lex;
                //solo me sirve para poner el = a lo ultimo
                if (lex.equals("=")) {
                    primero = operando1;
                    operando1 = "";
                    x = -1;
                    operador = "";
                    operando2 = "";
                }
            } else {
                if (operando1.equals("")) {
                    operando1 = lex;
                }
                operando2 = lex;
            }
            x++;
            if (x == 3) {
                operando1 = operando1 + " " + operador + " " + operando2;
                x = 1;
            }

        }

        String triplos[] = operando1.split("\\s");
        for (int n = 0; n < triplos.length; n++) {
            if (n == 0) {
                salida = contadorTriplos + "\t\t=\t\tT1\t\t" + triplos[n] + "\n";
                contadorTriplos++;
            } else {
                if (isOperator(triplos[n])) {
                    salida = salida + contadorTriplos + "\t\t" + triplos[n] + "\t\tT1\t\t" + triplos[n + 1] + "\n";
                    contadorTriplos++;
                }
            }
        }
        salida = salida + contadorTriplos + "\t\t=\t\t" + primero + "\t\tT1\n";
        contadorTriplos++;
        triplo = triplo + salida;
    }

    public void calcularTriplosSwitch(String t2) {

        triploSwitch = contadorTriplos + "\t\t=\t\tT1\t\t" + t1 + "\n";
        contadorTriplos++;
        triploSwitch = triploSwitch + contadorTriplos + "\t\t=\t\tT2\t\t" + t2 + "\n";
        contadorTriplos++;
        triploSwitch = triploSwitch + contadorTriplos + "\t\t==\t\tT1\t\tT2\n";
        contadorTriplos++;
        triploSwitch = triploSwitch + contadorTriplos + "\t\tTR1\t\tTRUE\t\t" + (contadorTriplos + 2) + "\n";
        contadorTriplos++;
        triploSwitch = triploSwitch + contadorTriplos + "\t\tTR1\t\tFALSE\t\tSALTO\n";
        contadorTriplos++; //CAMBIAR SALTO
        triplo = triplo + triploSwitch;
        /*
int x1 , x2 ;
float x3 ;
x1 = x2 + x3 ;
switch ( x1 )
{
case 1 :
x2 = x1 ;
break ;
case 2 :
x3 = x4 ;
break ;
}
         */
    }

    public static int precedence(String operator) {
        switch (operator) {
            case "+":
            case "-":
                return 1;
            case "*":
            case "/":
                return 2;
            default:
                return 0;
        }
    }//End of priority method

    public boolean isOperator(String element) {
        if (element.equals("+") || element.equals("-") || element.equals("/") || element.equals("*") || element.equals("=")) {
            return true;
        } else {
            return false;
        }
    }//End of isOperator method

    public static void checarLexema(String lexema, String linea, int n) {

        Pattern patIDE = Pattern.compile("[a-zA-Z]||[a-zA-Z]\\w*");        //cualquier identificador que empiece por letra
        Matcher matIDE = patIDE.matcher(lexema);

        if (matIDE.matches()) {
            lexemas = lexemas + lexema + " ";
            if (checarExistencia(lexema) == false) {
                if (lexema.equals("int") || lexema.equals("float") || lexema.equals("switch") || lexema.equals("case")) {
                    checarTipoDato(lexema, linea);
                } else {
                    TablaVariables.add(new Variables(lexema, "IDE" + numIDE, checarDato(lexema, linea)));
                    numIDE++;
                }
            }
        } else {
            lexemas = lexemas + lexema + " ";
            switch (lexema) {
                case ";":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "DEL", checarDato(lexema, linea)));
                    }
                    break;
                case ",":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "SEP", checarDato(lexema, linea)));
                    }
                    break;
                case "+":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "SUM", checarDato(lexema, linea)));
                    }
                    break;
                case "-":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "REST", checarDato(lexema, linea)));
                    }
                    break;
                case "*":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "MULT", checarDato(lexema, linea)));
                    }
                    break;
                case "/":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "DIV", checarDato(lexema, linea)));
                    }
                    break;
                case "=":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "ASIG", checarDato(lexema, linea)));
                    }
                    break;
                case "(":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "PARIZQ", checarDato(lexema, linea)));
                    }
                    break;
                case ")":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "PARDER", checarDato(lexema, linea)));
                    }
                    break;
                case "{":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "LLAVIZQ", checarDato(lexema, linea)));
                    }
                    break;
                case "}":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "LLAVDER", checarDato(lexema, linea)));
                    }
                    break;
                case ":":
                    if (!checarExistencia(lexema)) {
                        TablaVariables.add(new Variables(lexema, "DEL2", checarDato(lexema, linea)));
                    }
                    break;

                default:
                    if (!checarExistenciaErrores(lexema) && !checarExistencia(lexema)) {
                        TablaErrores.add(new Errores("IDE" + numIDE, lexema, n));
                        TablaVariables.add(new Variables(lexema, "IDE" + numIDE, checarDato(lexema, linea)));
                        numIDE++;
                    }
            }
        }

    }

    public static void checarTipoDato(String token, String linea) {
        String tida = "";
        if (token.equals("int")) {
            tida = "INT";
        }

        if (token.equals("float")) {
            tida = "FLOAT";
        }

        if (token.equals("switch")) {
            tida = "SWITCH";
        }

        if (token.equals("case")) {
            tida = "CASE";
        }
        TablaVariables.add(new Variables(token, tida, checarDato(token, linea)));
    }

    public static String checarDato(String token, String linea) {
        String dato = "";
        Pattern patINT = Pattern.compile("int");
        Matcher matINT = patINT.matcher(linea);

        Pattern patFLO = Pattern.compile("float");
        Matcher matFLO = patFLO.matcher(linea);

        if (matINT.find()) {
            dato = "int";
        }

        if (matFLO.find()) {
            dato = "float";
        }

        if (token.equals("int") || token.equals("float") || token.equals(",") || token.equals(";")) {
            dato = "";
        }
        return dato;
    }

    public static boolean checarExistencia(String token) {
        Variables var;
        for (int i = 0; i < TablaVariables.size(); i++) {
            var = TablaVariables.get(i);
            if (var.getLexema().equals(token)) {
                return true;
            }
        }
        return false;
    }

    public static boolean checarExistenciaErrores(String token) {
        Errores error;
        for (int i = 0; i < TablaErrores.size(); i++) {
            error = TablaErrores.get(i);
            if (error.getToken().equals(token)) {
                return true;
            }
        }
        return false;
    }

    public static void limpiarTabla() {
        //HACER QUE ME LIMPIE LAS TABLAS
        DefaultTableModel model1 = new DefaultTableModel();
        DefaultTableModel model2 = new DefaultTableModel();
        model1.setColumnIdentifiers(new Object[]{"LEXEMA", "TOKEN", "DATO"});
        model1.setRowCount(0);
        model2.setColumnIdentifiers(new Object[]{"TOKEN", "LEXEMA", "LINEA"});
        model2.setRowCount(0);
        tableVariables.setModel(model1);
        TablaVariables.clear();
        tableErrores.setModel(model2);
        TablaErrores.clear();

        numIDE = 1;
        lexemas = "";
        texto = "";
        triplo = "Operador\tDato Objeto\tDato Fuente\n";

    }

    ////////////////////// IMPRESORES ////////////////////
    public static void imprimirVariables() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"LEXEMA", "TOKEN", "DATO"});
        Object[] row = new Object[3];

        for (int i = 0; i < TablaVariables.size(); i++) {
            row[0] = TablaVariables.get(i).getLexema();
            row[1] = TablaVariables.get(i).getToken();
            row[2] = TablaVariables.get(i).getDato();
            model.addRow(row);
        }
        tableVariables.setModel(model);
    }

    public static void imprimirErrores() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"TOKEN", "LEXEMA", "LINEA"});
        Object[] row = new Object[3];

        for (int i = 0; i < TablaErrores.size(); i++) {
            row[0] = TablaErrores.get(i).getToken();
            row[1] = TablaErrores.get(i).getDescripcion();
            row[2] = TablaErrores.get(i).getLinea();
            model.addRow(row);
        }
        tableErrores.setModel(model);
    }

    private void imprimirTxt() {

        String[] token = lexemas.split("\\s");
        for (String token1 : token) {   //para checar cada token
            for (int i = 0; i < TablaVariables.size(); i++) {
                Variables var = TablaVariables.get(i);
                if (var.getLexema().equals(token1)) {
                    texto = texto + var.getToken() + " ";
                    if (token1.equals(";") || token1.equals(":") || token1.equals("{") || token1.equals("}")) {
                        texto = texto + " \n";
                    }
                }
            }
        }

        try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream("Archivo de Tokens.txt"), "utf-8"))) {
            writer.write(texto);

        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(CompiAritmetica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CompiAritmetica.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void imprimirTxtTriplos() {

        try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream("Archivo de Triplo.txt"), "utf-8"))) {
            writer.write(triplo);

        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(CompiAritmetica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CompiAritmetica.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    ////////////////////// CLASES ///////////////////
    public static class Variables {

        String lexema;
        String token;
        String dato;

        public Variables(String lexema, String token, String dato) {
            this.lexema = lexema;
            this.token = token;
            this.dato = dato;
        }

        public String getToken() {
            return token;
        }

        public String getLexema() {
            return lexema;
        }

        public String getDato() {
            return dato;
        }

    }

    public static class Errores {

        String token;
        String descripcion;
        int linea;

        public Errores(String token, String descripcion, int linea) {
            this.token = token;
            this.descripcion = descripcion;
            this.linea = linea;
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public String getDescripcion() {
            return descripcion;
        }

        public void setDescripcion(String descripcion) {
            this.descripcion = descripcion;
        }

        public int getLinea() {
            return linea;
        }

        public void setLinea(int linea) {
            this.linea = linea;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnReglas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private static javax.swing.JTable tableErrores;
    private static javax.swing.JTable tableVariables;
    private javax.swing.JTextArea txtInst;
    // End of variables declaration//GEN-END:variables
}
